import React, { useState } from 'react';
import { AlertTriangle, Shield, Download, Trash2, Eye, Clock, Target, Bug } from 'lucide-react';
import { Vulnerability } from '../types';

interface VulnerabilityDashboardProps {
  vulnerabilities: Vulnerability[];
  onClearVulnerabilities: () => void;
  onExportReport: () => void;
}

const VulnerabilityDashboard: React.FC<VulnerabilityDashboardProps> = ({
  vulnerabilities,
  onClearVulnerabilities,
  onExportReport
}) => {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'severity' | 'date' | 'category'>('severity');

  const severityColors = {
    critical: 'bg-red-100 text-red-800 border-red-200',
    high: 'bg-orange-100 text-orange-800 border-orange-200',
    medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    low: 'bg-blue-100 text-blue-800 border-blue-200'
  };

  const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };

  const filteredVulnerabilities = vulnerabilities
    .filter(vuln => filterSeverity === 'all' || vuln.severity === filterSeverity)
    .sort((a, b) => {
      switch (sortBy) {
        case 'severity':
          return severityOrder[b.severity] - severityOrder[a.severity];
        case 'date':
          return b.discoveredAt.getTime() - a.discoveredAt.getTime();
        case 'category':
          return a.category.localeCompare(b.category);
        default:
          return 0;
      }
    });

  const severityStats = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="w-4 h-4" />;
      case 'high':
        return <AlertTriangle className="w-4 h-4" />;
      case 'medium':
        return <Shield className="w-4 h-4" />;
      case 'low':
        return <Bug className="w-4 h-4" />;
      default:
        return <Shield className="w-4 h-4" />;
    }
  };

  if (vulnerabilities.length === 0) {
    return (
      <div className="card text-center py-12">
        <Shield className="w-12 h-12 text-success-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">No Vulnerabilities Found</h3>
        <p className="text-gray-600 mb-6">
          Great! No vulnerabilities have been detected yet. Start a scan to analyze your target system.
        </p>
        <div className="flex justify-center space-x-3">
          <button className="btn btn-primary">
            Start Security Scan
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Vulnerability Dashboard</h2>
          <p className="text-gray-600 mt-1">
            {vulnerabilities.length} vulnerabilities discovered
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={onExportReport}
            className="btn btn-secondary flex items-center space-x-2"
          >
            <Download className="w-4 h-4" />
            <span>Export Report</span>
          </button>
          
          <button
            onClick={onClearVulnerabilities}
            className="btn btn-danger flex items-center space-x-2"
          >
            <Trash2 className="w-4 h-4" />
            <span>Clear All</span>
          </button>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {Object.entries(severityOrder).map(([severity, _]) => (
          <div key={severity} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 capitalize">{severity}</p>
                <p className="text-2xl font-bold text-gray-900">
                  {severityStats[severity] || 0}
                </p>
              </div>
              <div className={`p-3 rounded-lg ${severityColors[severity as keyof typeof severityColors]}`}>
                {getSeverityIcon(severity)}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Filters and Controls */}
      <div className="card">
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div className="flex items-center space-x-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Severity</label>
              <select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                className="input w-auto"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Sort by</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as any)}
                className="input w-auto"
              >
                <option value="severity">Severity</option>
                <option value="date">Discovery Date</option>
                <option value="category">Category</option>
              </select>
            </div>
          </div>
          
          <div className="text-sm text-gray-600">
            Showing {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
          </div>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="space-y-4">
          {filteredVulnerabilities.map((vulnerability) => (
            <div
              key={vulnerability.id}
              className={`card cursor-pointer transition-all duration-200 hover:shadow-md ${
                selectedVulnerability?.id === vulnerability.id ? 'ring-2 ring-primary-500' : ''
              }`}
              onClick={() => setSelectedVulnerability(vulnerability)}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <span className={`status-indicator ${severityColors[vulnerability.severity]} flex items-center space-x-1`}>
                      {getSeverityIcon(vulnerability.severity)}
                      <span className="capitalize">{vulnerability.severity}</span>
                    </span>
                    <span className="text-xs text-gray-500">{vulnerability.category}</span>
                  </div>
                  
                  <h4 className="font-semibold text-gray-900 mb-2">{vulnerability.title}</h4>
                  <p className="text-sm text-gray-600 line-clamp-2">{vulnerability.description}</p>
                  
                  <div className="flex items-center space-x-4 mt-3 text-xs text-gray-500">
                    <div className="flex items-center space-x-1">
                      <Clock className="w-3 h-3" />
                      <span>{formatDate(vulnerability.discoveredAt)}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Target className="w-3 h-3" />
                      <span>{vulnerability.affectedComponent}</span>
                    </div>
                  </div>
                </div>
                
                <Eye className="w-4 h-4 text-gray-400" />
              </div>
            </div>
          ))}
        </div>

        {/* Vulnerability Details */}
        <div className="lg:sticky lg:top-6">
          {selectedVulnerability ? (
            <div className="card">
              <div className="flex items-center space-x-3 mb-4">
                <span className={`status-indicator ${severityColors[selectedVulnerability.severity]} flex items-center space-x-1`}>
                  {getSeverityIcon(selectedVulnerability.severity)}
                  <span className="capitalize">{selectedVulnerability.severity}</span>
                </span>
                {selectedVulnerability.cvss && (
                  <span className="text-sm text-gray-600">
                    CVSS: {selectedVulnerability.cvss}
                  </span>
                )}
                {selectedVulnerability.cve && (
                  <span className="text-sm text-gray-600">
                    {selectedVulnerability.cve}
                  </span>
                )}
              </div>
              
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                {selectedVulnerability.title}
              </h3>
              
              <div className="space-y-6">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Description</h4>
                  <p className="text-gray-700">{selectedVulnerability.description}</p>
                </div>
                
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Affected Component</h4>
                  <p className="text-gray-700">{selectedVulnerability.affectedComponent}</p>
                </div>
                
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Recommendation</h4>
                  <p className="text-gray-700">{selectedVulnerability.recommendation}</p>
                </div>
                
                {selectedVulnerability.evidence.length > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Evidence</h4>
                    <div className="space-y-2">
                      {selectedVulnerability.evidence.map((evidence, index) => (
                        <div key={index} className="bg-gray-50 p-3 rounded border font-mono text-sm">
                          {evidence}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <div className="pt-4 border-t border-gray-200">
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    <div className="flex items-center space-x-1">
                      <Clock className="w-4 h-4" />
                      <span>Discovered: {formatDate(selectedVulnerability.discoveredAt)}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="card text-center py-12">
              <Eye className="w-8 h-8 text-gray-400 mx-auto mb-3" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Select a Vulnerability</h3>
              <p className="text-gray-600">
                Click on a vulnerability from the list to view detailed information
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDashboard;